// Code generated by sqlc. DO NOT EDIT.
// source: portfolio.sql

package db

import (
	"context"
)

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO portfolio (
  id, name, user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, name, user_id
`

type CreatePortfolioParams struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	UserID string `json:"user_id"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (Portfolio, error) {
	row := q.queryRow(ctx, q.createPortfolioStmt, createPortfolio, arg.ID, arg.Name, arg.UserID)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM portfolio
WHERE id = $1
`

func (q *Queries) DeletePortfolio(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deletePortfolioStmt, deletePortfolio, id)
	return err
}

const getPortfolio = `-- name: GetPortfolio :one
SELECT id, name, user_id FROM portfolio
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPortfolio(ctx context.Context, id string) (Portfolio, error) {
	row := q.queryRow(ctx, q.getPortfolioStmt, getPortfolio, id)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const listPortfolios = `-- name: ListPortfolios :many
SELECT id, name, user_id FROM portfolio
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListPortfolios(ctx context.Context, userID string) ([]Portfolio, error) {
	rows, err := q.query(ctx, q.listPortfoliosStmt, listPortfolios, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Portfolio
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE portfolio
SET name = $2
WHERE id = $1
RETURNING id, name, user_id
`

type UpdatePortfolioParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (Portfolio, error) {
	row := q.queryRow(ctx, q.updatePortfolioStmt, updatePortfolio, arg.ID, arg.Name)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}
