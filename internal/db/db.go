// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.activateUserStmt, err = db.PrepareContext(ctx, activateUser); err != nil {
		return nil, fmt.Errorf("error preparing query ActivateUser: %w", err)
	}
	if q.addISINAndWKNStmt, err = db.PrepareContext(ctx, addISINAndWKN); err != nil {
		return nil, fmt.Errorf("error preparing query AddISINAndWKN: %w", err)
	}
	if q.addSymbolStmt, err = db.PrepareContext(ctx, addSymbol); err != nil {
		return nil, fmt.Errorf("error preparing query AddSymbol: %w", err)
	}
	if q.bulkImportSymbolStmt, err = db.PrepareContext(ctx, bulkImportSymbol); err != nil {
		return nil, fmt.Errorf("error preparing query BulkImportSymbol: %w", err)
	}
	if q.bulkImportSymbolExchangeStmt, err = db.PrepareContext(ctx, bulkImportSymbolExchange); err != nil {
		return nil, fmt.Errorf("error preparing query BulkImportSymbolExchange: %w", err)
	}
	if q.connectSymbolWithExchangeStmt, err = db.PrepareContext(ctx, connectSymbolWithExchange); err != nil {
		return nil, fmt.Errorf("error preparing query ConnectSymbolWithExchange: %w", err)
	}
	if q.countByEmailStmt, err = db.PrepareContext(ctx, countByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CountByEmail: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createExchangeStmt, err = db.PrepareContext(ctx, createExchange); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExchange: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserRegistrationStmt, err = db.PrepareContext(ctx, createUserRegistration); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserRegistration: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteTransactionStmt, err = db.PrepareContext(ctx, deleteTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransaction: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.doesExchangeExistStmt, err = db.PrepareContext(ctx, doesExchangeExist); err != nil {
		return nil, fmt.Errorf("error preparing query DoesExchangeExist: %w", err)
	}
	if q.existsByEmailStmt, err = db.PrepareContext(ctx, existsByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsByEmail: %w", err)
	}
	if q.findByEmailStmt, err = db.PrepareContext(ctx, findByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query FindByEmail: %w", err)
	}
	if q.finishJobStmt, err = db.PrepareContext(ctx, finishJob); err != nil {
		return nil, fmt.Errorf("error preparing query FinishJob: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getBalanceByUserStmt, err = db.PrepareContext(ctx, getBalanceByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetBalanceByUser: %w", err)
	}
	if q.getExchangesOfAssetStmt, err = db.PrepareContext(ctx, getExchangesOfAsset); err != nil {
		return nil, fmt.Errorf("error preparing query GetExchangesOfAsset: %w", err)
	}
	if q.getJobStmt, err = db.PrepareContext(ctx, getJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetJob: %w", err)
	}
	if q.getJobsByNameStmt, err = db.PrepareContext(ctx, getJobsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobsByName: %w", err)
	}
	if q.getLastJobByNameStmt, err = db.PrepareContext(ctx, getLastJobByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastJobByName: %w", err)
	}
	if q.getSymbolStmt, err = db.PrepareContext(ctx, getSymbol); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbol: %w", err)
	}
	if q.getSymbolByWKNStmt, err = db.PrepareContext(ctx, getSymbolByWKN); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbolByWKN: %w", err)
	}
	if q.getSymbolCountStmt, err = db.PrepareContext(ctx, getSymbolCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbolCount: %w", err)
	}
	if q.getSymbolCountByTypeStmt, err = db.PrepareContext(ctx, getSymbolCountByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbolCountByType: %w", err)
	}
	if q.getSymbolOfSymbolAndExchangeStmt, err = db.PrepareContext(ctx, getSymbolOfSymbolAndExchange); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbolOfSymbolAndExchange: %w", err)
	}
	if q.getSymbolsStmt, err = db.PrepareContext(ctx, getSymbols); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbols: %w", err)
	}
	if q.getSymbolsByTypeStmt, err = db.PrepareContext(ctx, getSymbolsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetSymbolsByType: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserRegistrationStmt, err = db.PrepareContext(ctx, getUserRegistration); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserRegistration: %w", err)
	}
	if q.getUserRegistrationByUserIdStmt, err = db.PrepareContext(ctx, getUserRegistrationByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserRegistrationByUserId: %w", err)
	}
	if q.isUserActivatedStmt, err = db.PrepareContext(ctx, isUserActivated); err != nil {
		return nil, fmt.Errorf("error preparing query IsUserActivated: %w", err)
	}
	if q.listAccountTypesStmt, err = db.PrepareContext(ctx, listAccountTypes); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccountTypes: %w", err)
	}
	if q.listAccountsStmt, err = db.PrepareContext(ctx, listAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccounts: %w", err)
	}
	if q.listTransactionsStmt, err = db.PrepareContext(ctx, listTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactions: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.searchSymbolStmt, err = db.PrepareContext(ctx, searchSymbol); err != nil {
		return nil, fmt.Errorf("error preparing query SearchSymbol: %w", err)
	}
	if q.startJobStmt, err = db.PrepareContext(ctx, startJob); err != nil {
		return nil, fmt.Errorf("error preparing query StartJob: %w", err)
	}
	if q.symbolExistsStmt, err = db.PrepareContext(ctx, symbolExists); err != nil {
		return nil, fmt.Errorf("error preparing query SymbolExists: %w", err)
	}
	if q.transactionExistsStmt, err = db.PrepareContext(ctx, transactionExists); err != nil {
		return nil, fmt.Errorf("error preparing query TransactionExists: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateSymbolStmt, err = db.PrepareContext(ctx, updateSymbol); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSymbol: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.activateUserStmt != nil {
		if cerr := q.activateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing activateUserStmt: %w", cerr)
		}
	}
	if q.addISINAndWKNStmt != nil {
		if cerr := q.addISINAndWKNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addISINAndWKNStmt: %w", cerr)
		}
	}
	if q.addSymbolStmt != nil {
		if cerr := q.addSymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSymbolStmt: %w", cerr)
		}
	}
	if q.bulkImportSymbolStmt != nil {
		if cerr := q.bulkImportSymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing bulkImportSymbolStmt: %w", cerr)
		}
	}
	if q.bulkImportSymbolExchangeStmt != nil {
		if cerr := q.bulkImportSymbolExchangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing bulkImportSymbolExchangeStmt: %w", cerr)
		}
	}
	if q.connectSymbolWithExchangeStmt != nil {
		if cerr := q.connectSymbolWithExchangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing connectSymbolWithExchangeStmt: %w", cerr)
		}
	}
	if q.countByEmailStmt != nil {
		if cerr := q.countByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countByEmailStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createExchangeStmt != nil {
		if cerr := q.createExchangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExchangeStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserRegistrationStmt != nil {
		if cerr := q.createUserRegistrationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserRegistrationStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteTransactionStmt != nil {
		if cerr := q.deleteTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransactionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.doesExchangeExistStmt != nil {
		if cerr := q.doesExchangeExistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing doesExchangeExistStmt: %w", cerr)
		}
	}
	if q.existsByEmailStmt != nil {
		if cerr := q.existsByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsByEmailStmt: %w", cerr)
		}
	}
	if q.findByEmailStmt != nil {
		if cerr := q.findByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findByEmailStmt: %w", cerr)
		}
	}
	if q.finishJobStmt != nil {
		if cerr := q.finishJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finishJobStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getBalanceByUserStmt != nil {
		if cerr := q.getBalanceByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBalanceByUserStmt: %w", cerr)
		}
	}
	if q.getExchangesOfAssetStmt != nil {
		if cerr := q.getExchangesOfAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExchangesOfAssetStmt: %w", cerr)
		}
	}
	if q.getJobStmt != nil {
		if cerr := q.getJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobStmt: %w", cerr)
		}
	}
	if q.getJobsByNameStmt != nil {
		if cerr := q.getJobsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobsByNameStmt: %w", cerr)
		}
	}
	if q.getLastJobByNameStmt != nil {
		if cerr := q.getLastJobByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastJobByNameStmt: %w", cerr)
		}
	}
	if q.getSymbolStmt != nil {
		if cerr := q.getSymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolStmt: %w", cerr)
		}
	}
	if q.getSymbolByWKNStmt != nil {
		if cerr := q.getSymbolByWKNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolByWKNStmt: %w", cerr)
		}
	}
	if q.getSymbolCountStmt != nil {
		if cerr := q.getSymbolCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolCountStmt: %w", cerr)
		}
	}
	if q.getSymbolCountByTypeStmt != nil {
		if cerr := q.getSymbolCountByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolCountByTypeStmt: %w", cerr)
		}
	}
	if q.getSymbolOfSymbolAndExchangeStmt != nil {
		if cerr := q.getSymbolOfSymbolAndExchangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolOfSymbolAndExchangeStmt: %w", cerr)
		}
	}
	if q.getSymbolsStmt != nil {
		if cerr := q.getSymbolsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolsStmt: %w", cerr)
		}
	}
	if q.getSymbolsByTypeStmt != nil {
		if cerr := q.getSymbolsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSymbolsByTypeStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserRegistrationStmt != nil {
		if cerr := q.getUserRegistrationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserRegistrationStmt: %w", cerr)
		}
	}
	if q.getUserRegistrationByUserIdStmt != nil {
		if cerr := q.getUserRegistrationByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserRegistrationByUserIdStmt: %w", cerr)
		}
	}
	if q.isUserActivatedStmt != nil {
		if cerr := q.isUserActivatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isUserActivatedStmt: %w", cerr)
		}
	}
	if q.listAccountTypesStmt != nil {
		if cerr := q.listAccountTypesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountTypesStmt: %w", cerr)
		}
	}
	if q.listAccountsStmt != nil {
		if cerr := q.listAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountsStmt: %w", cerr)
		}
	}
	if q.listTransactionsStmt != nil {
		if cerr := q.listTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.searchSymbolStmt != nil {
		if cerr := q.searchSymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchSymbolStmt: %w", cerr)
		}
	}
	if q.startJobStmt != nil {
		if cerr := q.startJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing startJobStmt: %w", cerr)
		}
	}
	if q.symbolExistsStmt != nil {
		if cerr := q.symbolExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing symbolExistsStmt: %w", cerr)
		}
	}
	if q.transactionExistsStmt != nil {
		if cerr := q.transactionExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transactionExistsStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateSymbolStmt != nil {
		if cerr := q.updateSymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSymbolStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	activateUserStmt                 *sql.Stmt
	addISINAndWKNStmt                *sql.Stmt
	addSymbolStmt                    *sql.Stmt
	bulkImportSymbolStmt             *sql.Stmt
	bulkImportSymbolExchangeStmt     *sql.Stmt
	connectSymbolWithExchangeStmt    *sql.Stmt
	countByEmailStmt                 *sql.Stmt
	createAccountStmt                *sql.Stmt
	createExchangeStmt               *sql.Stmt
	createTransactionStmt            *sql.Stmt
	createUserStmt                   *sql.Stmt
	createUserRegistrationStmt       *sql.Stmt
	deleteAccountStmt                *sql.Stmt
	deleteTransactionStmt            *sql.Stmt
	deleteUserStmt                   *sql.Stmt
	doesExchangeExistStmt            *sql.Stmt
	existsByEmailStmt                *sql.Stmt
	findByEmailStmt                  *sql.Stmt
	finishJobStmt                    *sql.Stmt
	getAccountStmt                   *sql.Stmt
	getBalanceByUserStmt             *sql.Stmt
	getExchangesOfAssetStmt          *sql.Stmt
	getJobStmt                       *sql.Stmt
	getJobsByNameStmt                *sql.Stmt
	getLastJobByNameStmt             *sql.Stmt
	getSymbolStmt                    *sql.Stmt
	getSymbolByWKNStmt               *sql.Stmt
	getSymbolCountStmt               *sql.Stmt
	getSymbolCountByTypeStmt         *sql.Stmt
	getSymbolOfSymbolAndExchangeStmt *sql.Stmt
	getSymbolsStmt                   *sql.Stmt
	getSymbolsByTypeStmt             *sql.Stmt
	getTransactionStmt               *sql.Stmt
	getUserStmt                      *sql.Stmt
	getUserRegistrationStmt          *sql.Stmt
	getUserRegistrationByUserIdStmt  *sql.Stmt
	isUserActivatedStmt              *sql.Stmt
	listAccountTypesStmt             *sql.Stmt
	listAccountsStmt                 *sql.Stmt
	listTransactionsStmt             *sql.Stmt
	listUsersStmt                    *sql.Stmt
	searchSymbolStmt                 *sql.Stmt
	startJobStmt                     *sql.Stmt
	symbolExistsStmt                 *sql.Stmt
	transactionExistsStmt            *sql.Stmt
	updateAccountStmt                *sql.Stmt
	updateSymbolStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		activateUserStmt:                 q.activateUserStmt,
		addISINAndWKNStmt:                q.addISINAndWKNStmt,
		addSymbolStmt:                    q.addSymbolStmt,
		bulkImportSymbolStmt:             q.bulkImportSymbolStmt,
		bulkImportSymbolExchangeStmt:     q.bulkImportSymbolExchangeStmt,
		connectSymbolWithExchangeStmt:    q.connectSymbolWithExchangeStmt,
		countByEmailStmt:                 q.countByEmailStmt,
		createAccountStmt:                q.createAccountStmt,
		createExchangeStmt:               q.createExchangeStmt,
		createTransactionStmt:            q.createTransactionStmt,
		createUserStmt:                   q.createUserStmt,
		createUserRegistrationStmt:       q.createUserRegistrationStmt,
		deleteAccountStmt:                q.deleteAccountStmt,
		deleteTransactionStmt:            q.deleteTransactionStmt,
		deleteUserStmt:                   q.deleteUserStmt,
		doesExchangeExistStmt:            q.doesExchangeExistStmt,
		existsByEmailStmt:                q.existsByEmailStmt,
		findByEmailStmt:                  q.findByEmailStmt,
		finishJobStmt:                    q.finishJobStmt,
		getAccountStmt:                   q.getAccountStmt,
		getBalanceByUserStmt:             q.getBalanceByUserStmt,
		getExchangesOfAssetStmt:          q.getExchangesOfAssetStmt,
		getJobStmt:                       q.getJobStmt,
		getJobsByNameStmt:                q.getJobsByNameStmt,
		getLastJobByNameStmt:             q.getLastJobByNameStmt,
		getSymbolStmt:                    q.getSymbolStmt,
		getSymbolByWKNStmt:               q.getSymbolByWKNStmt,
		getSymbolCountStmt:               q.getSymbolCountStmt,
		getSymbolCountByTypeStmt:         q.getSymbolCountByTypeStmt,
		getSymbolOfSymbolAndExchangeStmt: q.getSymbolOfSymbolAndExchangeStmt,
		getSymbolsStmt:                   q.getSymbolsStmt,
		getSymbolsByTypeStmt:             q.getSymbolsByTypeStmt,
		getTransactionStmt:               q.getTransactionStmt,
		getUserStmt:                      q.getUserStmt,
		getUserRegistrationStmt:          q.getUserRegistrationStmt,
		getUserRegistrationByUserIdStmt:  q.getUserRegistrationByUserIdStmt,
		isUserActivatedStmt:              q.isUserActivatedStmt,
		listAccountTypesStmt:             q.listAccountTypesStmt,
		listAccountsStmt:                 q.listAccountsStmt,
		listTransactionsStmt:             q.listTransactionsStmt,
		listUsersStmt:                    q.listUsersStmt,
		searchSymbolStmt:                 q.searchSymbolStmt,
		startJobStmt:                     q.startJobStmt,
		symbolExistsStmt:                 q.symbolExistsStmt,
		transactionExistsStmt:            q.transactionExistsStmt,
		updateAccountStmt:                q.updateAccountStmt,
		updateSymbolStmt:                 q.updateSymbolStmt,
	}
}
