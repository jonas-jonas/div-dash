// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: job_history.sql

package db

import (
	"context"
	"database/sql"
)

const finishJob = `-- name: FinishJob :one
UPDATE "job_history"
SET "finished" = $1, "error_message" = $2
WHERE id = $3
RETURNING "name", "id", "started", "finished"
`

type FinishJobParams struct {
	Finished     sql.NullInt64  `json:"finished"`
	ErrorMessage sql.NullString `json:"errorMessage"`
	ID           int32          `json:"id"`
}

type FinishJobRow struct {
	Name     string        `json:"name"`
	ID       int32         `json:"id"`
	Started  int64         `json:"started"`
	Finished sql.NullInt64 `json:"finished"`
}

func (q *Queries) FinishJob(ctx context.Context, arg FinishJobParams) (FinishJobRow, error) {
	row := q.queryRow(ctx, q.finishJobStmt, finishJob, arg.Finished, arg.ErrorMessage, arg.ID)
	var i FinishJobRow
	err := row.Scan(
		&i.Name,
		&i.ID,
		&i.Started,
		&i.Finished,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT id, name, started, finished, error_message
FROM "job_history"
WHERE id = $1
`

func (q *Queries) GetJob(ctx context.Context, id int32) (JobHistory, error) {
	row := q.queryRow(ctx, q.getJobStmt, getJob, id)
	var i JobHistory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Started,
		&i.Finished,
		&i.ErrorMessage,
	)
	return i, err
}

const getJobsByName = `-- name: GetJobsByName :many
SELECT id, name, started, finished, error_message
FROM "job_history"
WHERE name = $1
ORDER BY started
`

func (q *Queries) GetJobsByName(ctx context.Context, name string) ([]JobHistory, error) {
	rows, err := q.query(ctx, q.getJobsByNameStmt, getJobsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobHistory
	for rows.Next() {
		var i JobHistory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Started,
			&i.Finished,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastJobByName = `-- name: GetLastJobByName :one
SELECT 
    id, name, started, finished, error_message, 
    CASE WHEN error_message IS NULL THEN false ELSE true END AS had_error
FROM "job_history"
WHERE name = $1
ORDER BY started DESC
LIMIT 1
`

type GetLastJobByNameRow struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	Started      int64          `json:"started"`
	Finished     sql.NullInt64  `json:"finished"`
	ErrorMessage sql.NullString `json:"errorMessage"`
	HadError     bool           `json:"hadError"`
}

func (q *Queries) GetLastJobByName(ctx context.Context, name string) (GetLastJobByNameRow, error) {
	row := q.queryRow(ctx, q.getLastJobByNameStmt, getLastJobByName, name)
	var i GetLastJobByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Started,
		&i.Finished,
		&i.ErrorMessage,
		&i.HadError,
	)
	return i, err
}

const startJob = `-- name: StartJob :one
INSERT INTO "job_history" (name, started)
VALUES ($1, $2)
RETURNING id, started
`

type StartJobParams struct {
	Name    string `json:"name"`
	Started int64  `json:"started"`
}

type StartJobRow struct {
	ID      int32 `json:"id"`
	Started int64 `json:"started"`
}

func (q *Queries) StartJob(ctx context.Context, arg StartJobParams) (StartJobRow, error) {
	row := q.queryRow(ctx, q.startJobStmt, startJob, arg.Name, arg.Started)
	var i StartJobRow
	err := row.Scan(&i.ID, &i.Started)
	return i, err
}
