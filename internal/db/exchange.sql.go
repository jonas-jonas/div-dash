// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: exchange.sql

package db

import (
	"context"
	"database/sql"
)

const createExchange = `-- name: CreateExchange :exec
INSERT INTO "exchange" (
    exchange, region, description, mic, exchange_suffix
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT DO NOTHING
`

type CreateExchangeParams struct {
	Exchange       string `json:"exchange"`
	Region         string `json:"region"`
	Description    string `json:"description"`
	Mic            string `json:"mic"`
	ExchangeSuffix string `json:"exchangeSuffix"`
}

func (q *Queries) CreateExchange(ctx context.Context, arg CreateExchangeParams) error {
	_, err := q.exec(ctx, q.createExchangeStmt, createExchange,
		arg.Exchange,
		arg.Region,
		arg.Description,
		arg.Mic,
		arg.ExchangeSuffix,
	)
	return err
}

const doesExchangeExist = `-- name: DoesExchangeExist :one
SELECT EXISTS(
    SELECT exchange, exchange_suffix, region, description, mic
    FROM "exchange"
    WHERE exchange = $1
)
`

func (q *Queries) DoesExchangeExist(ctx context.Context, exchange string) (bool, error) {
	row := q.queryRow(ctx, q.doesExchangeExistStmt, doesExchangeExist, exchange)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getExchangesOfSymbol = `-- name: GetExchangesOfSymbol :many
SELECT e.exchange, e.exchange_suffix, e.region, e.description, e.mic
FROM "symbol_exchange" ae
JOIN "exchange" e
    ON ae.exchange = e.exchange
WHERE ae.symbol_id = $1
`

func (q *Queries) GetExchangesOfSymbol(ctx context.Context, symbolID string) ([]Exchange, error) {
	rows, err := q.query(ctx, q.getExchangesOfSymbolStmt, getExchangesOfSymbol, symbolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exchange
	for rows.Next() {
		var i Exchange
		if err := rows.Scan(
			&i.Exchange,
			&i.ExchangeSuffix,
			&i.Region,
			&i.Description,
			&i.Mic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSymbolOfSymbolAndExchange = `-- name: GetSymbolOfSymbolAndExchange :one
SELECT symbol
FROM "symbol_exchange"
WHERE symbol_id = $1 AND exchange = $2
`

type GetSymbolOfSymbolAndExchangeParams struct {
	SymbolID string `json:"symbolID"`
	Exchange string `json:"exchange"`
}

func (q *Queries) GetSymbolOfSymbolAndExchange(ctx context.Context, arg GetSymbolOfSymbolAndExchangeParams) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getSymbolOfSymbolAndExchangeStmt, getSymbolOfSymbolAndExchange, arg.SymbolID, arg.Exchange)
	var symbol sql.NullString
	err := row.Scan(&symbol)
	return symbol, err
}
