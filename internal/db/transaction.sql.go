// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transaction" (
  id, symbol, type, "transaction_provider", price, "date", amount, account_id, user_id, side, external_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id
`

type CreateTransactionParams struct {
	ID                  string          `json:"id"`
	Symbol              string          `json:"symbol"`
	Type                string          `json:"type"`
	TransactionProvider string          `json:"transactionProvider"`
	Price               int64           `json:"price"`
	Date                time.Time       `json:"date"`
	Amount              decimal.Decimal `json:"amount"`
	AccountID           string          `json:"accountID"`
	UserID              string          `json:"userID"`
	Side                string          `json:"side"`
	ExternalID          sql.NullString  `json:"externalID"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (string, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.ID,
		arg.Symbol,
		arg.Type,
		arg.TransactionProvider,
		arg.Price,
		arg.Date,
		arg.Amount,
		arg.AccountID,
		arg.UserID,
		arg.Side,
		arg.ExternalID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM "transaction"
WHERE id = $1 AND account_id = $2 AND user_id = $3
`

type DeleteTransactionParams struct {
	ID        string `json:"id"`
	AccountID string `json:"accountID"`
	UserID    string `json:"userID"`
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.exec(ctx, q.deleteTransactionStmt, deleteTransaction, arg.ID, arg.AccountID, arg.UserID)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, symbol, type, transaction_provider, price, date, amount, account_id, user_id, side, external_id FROM "transaction"
WHERE id = $1 AND account_id = $2 AND user_id = $3
LIMIT 1
`

type GetTransactionParams struct {
	ID        string `json:"id"`
	AccountID string `json:"accountID"`
	UserID    string `json:"userID"`
}

func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, arg.ID, arg.AccountID, arg.UserID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Type,
		&i.TransactionProvider,
		&i.Price,
		&i.Date,
		&i.Amount,
		&i.AccountID,
		&i.UserID,
		&i.Side,
		&i.ExternalID,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, symbol, type, transaction_provider, price, date, amount, account_id, user_id, side, external_id FROM "transaction"
WHERE account_id = $1 AND user_id = $2
ORDER BY date DESC
`

type ListTransactionsParams struct {
	AccountID string `json:"accountID"`
	UserID    string `json:"userID"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsStmt, listTransactions, arg.AccountID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Type,
			&i.TransactionProvider,
			&i.Price,
			&i.Date,
			&i.Amount,
			&i.AccountID,
			&i.UserID,
			&i.Side,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const transactionExists = `-- name: TransactionExists :one
SELECT EXISTS (
  SELECT id
  FROM "transaction"
  WHERE external_id = $1
)
`

func (q *Queries) TransactionExists(ctx context.Context, externalID sql.NullString) (bool, error) {
	row := q.queryRow(ctx, q.transactionExistsStmt, transactionExists, externalID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
