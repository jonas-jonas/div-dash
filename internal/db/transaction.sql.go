// Code generated by sqlc. DO NOT EDIT.
// source: transaction.sql

package db

import (
	"context"
	"time"

	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transaction (
  symbol, type, transaction_provider, buy_in, buy_in_date, amount, portfolio_id, side
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING transaction_id, symbol, type, transaction_provider, buy_in, buy_in_date, amount, portfolio_id, side
`

type CreateTransactionParams struct {
	Symbol              string              `json:"symbol"`
	Type                TransactionType     `json:"type"`
	TransactionProvider TransactionProvider `json:"transaction_provider"`
	BuyIn               int64               `json:"buy_in"`
	BuyInDate           time.Time           `json:"buy_in_date"`
	Amount              decimal.Decimal     `json:"amount"`
	PortfolioID         int64               `json:"portfolio_id"`
	Side                TransactionSide     `json:"side"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.Symbol,
		arg.Type,
		arg.TransactionProvider,
		arg.BuyIn,
		arg.BuyInDate,
		arg.Amount,
		arg.PortfolioID,
		arg.Side,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.Symbol,
		&i.Type,
		&i.TransactionProvider,
		&i.BuyIn,
		&i.BuyInDate,
		&i.Amount,
		&i.PortfolioID,
		&i.Side,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transaction
WHERE transaction_id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, transactionID int64) error {
	_, err := q.exec(ctx, q.deleteTransactionStmt, deleteTransaction, transactionID)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT transaction_id, symbol, type, transaction_provider, buy_in, buy_in_date, amount, portfolio_id, side FROM transaction
WHERE transaction_id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, transactionID int64) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.Symbol,
		&i.Type,
		&i.TransactionProvider,
		&i.BuyIn,
		&i.BuyInDate,
		&i.Amount,
		&i.PortfolioID,
		&i.Side,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT transaction_id, symbol, type, transaction_provider, buy_in, buy_in_date, amount, portfolio_id, side FROM transaction
WHERE portfolio_id = $1
ORDER BY buy_in_date DESC
`

func (q *Queries) ListTransactions(ctx context.Context, portfolioID int64) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsStmt, listTransactions, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.Symbol,
			&i.Type,
			&i.TransactionProvider,
			&i.BuyIn,
			&i.BuyInDate,
			&i.Amount,
			&i.PortfolioID,
			&i.Side,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
